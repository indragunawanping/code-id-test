{"version":3,"sources":["modals/AddContactModal.module.css","Containers/ErrorModalContainer.module.css","Assets/kontak-ku-logo.webp","Components/ContactDetailPage.module.css","state.ts","common/LoadingComponent.tsx","Components/HomePage.tsx","actionsHttp.ts","actionsContact.ts","modals/AddContactModal.tsx","Containers/HomePageContainer.tsx","Containers/ErrorModalContainer.tsx","actions.ts","Components/ContactDetailPage.tsx","Containers/ContactDetailPageContainer.tsx","Components/App.tsx","serviceWorker.js","initialStates.ts","reducers.ts","index.tsx","Components/HomePage.module.css"],"names":["module","exports","HttpCallMethod","HttpCallStatus","LoadingComponent","Loader","active","inline","HomePage","props","className","styles","ContactContainer","Image","src","logo","Logo","List","selection","divided","verticalAlign","ContactList","size","isFetchingContact","contactList","contacts","contact","push","Item","onClick","handleContactClick","id","avatar","photo","Content","Header","firstName","lastName","renderContactList","Button","circular","color","icon","Float","handleAddButtonClick","updateHttpCallStatus","callId","newStatus","type","payload","status","addNewHttpCall","httpCall","sendHttpRequest","nextAction","errorAction","doHttpCall","then","response","ok","onSuccessful","catch","onFailed","configuration","method","credentials","undefined","headers","Object","assign","POST","PUT","requestBody","body","fetch","url","processResponse","failedAction","updateErrorModalStatus","errorModal","updateFetchingContactStatus","updateStoringContactStatus","isStoringContact","updateFetchingContactDetailStatus","isFetchingContactDetail","AddContactModal","Modal","open","isAddContactModalOpen","Form","Input","fluid","label","placeholder","value","onChange","handleFirstNameChange","handleLastNameChange","min","age","handleAgeChange","photoUrl","handlePhotoUrlChange","ErrorMessage","errorMessage","Actions","handleCancelButtonClick","CancelButton","handleAddContactButtonClick","AddButton","loading","connect","state","data","session","dispatch","useDispatch","useState","setIsAddContactModalOpen","setFirstName","setLastName","setAge","setPhotoUrl","setErrorMessage","useEffect","newCallId","uuid","GET","REACT_APP_APPLICATION_BASE_URL","errorModalStatus","isOpen","title","json","console","log","SUCCESSFUL","ERROR","content","message","error","httpCallSent","SENT","history","useHistory","useCallback","length","JSON","stringify","storingContact","Fragment","contactId","concat","event","currentTarget","Number","control","handleCloseErrorModal","onClose","ErrorModal","negative","ContactDetailPage","ContactDetail","currentContact","Name","Age","Buttons","handleButtonBackClick","handleButtonDeleteClick","contactIdParam","match","params","App","exact","path","component","HomePageContainer","ContactDetailPageContainer","Boolean","window","location","hostname","initialDataState","initialCommunicationState","httpCalls","initialControlState","successfulModal","initialSessionState","isUpdatingContact","isDeletingContact","reducers","combineReducers","action","communication","httpCallIndex","findIndex","x","newHttpCall","slice","logger","createLogger","level","collapsed","diff","middleware","composeWithDevTools","composeEnhancers","applyMiddleware","thunkMiddleware","store","createStore","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c43e3f52.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ErrorMessage\":\"AddContactModal_ErrorMessage__3V4E-\",\"CancelButton\":\"AddContactModal_CancelButton__pRGB9\",\"AddButton\":\"AddContactModal_AddButton__3dM6D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ErrorModal\":\"ErrorModalContainer_ErrorModal__rKHdl\",\"Header\":\"ErrorModalContainer_Header__1Ql4m\"};","module.exports = __webpack_public_path__ + \"static/media/kontak-ku-logo.92c29ec2.webp\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactContainer\":\"ContactDetailPage_ContactContainer__36iJ2\",\"ContactDetail\":\"ContactDetailPage_ContactDetail__20IHB\",\"Logo\":\"ContactDetailPage_Logo__2Eyvn\",\"Name\":\"ContactDetailPage_Name__1LtRP\",\"Age\":\"ContactDetailPage_Age__3S98p\",\"Buttons\":\"ContactDetailPage_Buttons__1mFli\"};","export interface State {\r\n  data: DataState;\r\n  communication: CommunicationState;\r\n  control: ControlState;\r\n  session: SessionState;\r\n}\r\n\r\nexport interface DataState {\r\n  contacts: Contact[];\r\n}\r\n\r\nexport interface CommunicationState {\r\n  httpCalls: HttpCall[];\r\n}\r\n\r\nexport interface ControlState {\r\n  currentContact: Contact;\r\n  errorModal: ErrorModalProps;\r\n  successfulModal: SuccessfulModalProps;\r\n}\r\n\r\nexport interface SessionState {\r\n  isFetchingContact: boolean;\r\n  isStoringContact: boolean;\r\n  isUpdatingContact: boolean;\r\n  isDeletingContact: boolean;\r\n  isFetchingContactDetail: boolean;\r\n}\r\n\r\nexport interface Contact {\r\n  id?: string,\r\n  firstName: string,\r\n  lastName: string,\r\n  age: number,\r\n  photo: string\r\n}\r\n\r\nexport interface HttpCall {\r\n  id: string;\r\n  method: HttpCallMethod;\r\n  url: string;\r\n  headers?: HttpHeader;\r\n  credentials?: RequestCredentials;\r\n  mode?: RequestMode;\r\n  requestBody?: string | any;\r\n  status?: HttpCallStatus;\r\n}\r\n\r\nexport enum HttpCallMethod {\r\n  POST = \"POST\",\r\n  PUT = \"PUT\",\r\n  GET = \"GET\",\r\n  DELETE = \"DELETE\"\r\n}\r\n\r\nexport interface HttpHeader {\r\n  [key: string]: string;\r\n}\r\n\r\nexport enum HttpCallStatus {\r\n  SENT = \"SENT\",\r\n  SUCCESSFUL = \"SUCCESSFUL\",\r\n  ERROR = \"ERROR\"\r\n}\r\n\r\nexport interface ErrorModalProps {\r\n  isOpen: boolean;\r\n  title?: string;\r\n  content?: string | JSX.Element;\r\n}\r\n\r\nexport interface SuccessfulModalProps {\r\n  isOpen: boolean;\r\n  title: string;\r\n  content: string | JSX.Element;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport { Loader } from \"semantic-ui-react\";\r\n\r\nconst LoadingComponent = () => {\r\n  return (\r\n    <Loader active inline='centered'/>\r\n  )\r\n};\r\n\r\nexport default LoadingComponent;\r\n","import React from \"react\";\r\nimport { Contact } from \"../state\";\r\nimport { Button, Image, List } from 'semantic-ui-react'\r\nimport styles from './HomePage.module.css';\r\nimport logo from '../Assets/kontak-ku-logo.webp';\r\nimport LoadingComponent from \"../common/LoadingComponent\";\r\n\r\ninterface HomePageProps {\r\n  contacts: Contact[];\r\n  isFetchingContact: boolean;\r\n  handleContactClick: (contactId: string | undefined) => void;\r\n  handleAddButtonClick: () => void;\r\n}\r\n\r\nconst HomePage: React.FC<HomePageProps> = (props: HomePageProps) => {\r\n  const renderContactList = () => {\r\n    let contactList: JSX.Element[] = [];\r\n\r\n    for (const contact of props.contacts) {\r\n      contactList.push(\r\n        <List.Item onClick={() => props.handleContactClick(contact.id)}>\r\n          <Image avatar src={contact.photo}/>\r\n          <List.Content>\r\n            <List.Header>{contact.firstName} {contact.lastName}</List.Header>\r\n          </List.Content>\r\n        </List.Item>\r\n      )\r\n    }\r\n\r\n    return contactList;\r\n  };\r\n\r\n  return (\r\n    <div className={styles.ContactContainer}>\r\n      <Image src={logo} className={styles.Logo}/>\r\n      <List selection divided verticalAlign='middle' className={styles.ContactList} size='big'>\r\n        {\r\n          props.isFetchingContact ?\r\n            <LoadingComponent/> :\r\n            renderContactList()\r\n        }\r\n      </List>\r\n      <Button circular color='violet' icon='add user' className={styles.Float} onClick={props.handleAddButtonClick}/>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default HomePage;\r\n","import { HttpCall, HttpCallMethod, HttpCallStatus } from \"./state\";\r\n\r\nexport const ADD_NEW_HTTP_CALL = \"ADD_NEW_HTTP_CALL\";\r\nexport const UPDATE_HTTP_CALL_STATUS = \"UPDATE_HTTP_CALL_STATUS\";\r\n\r\nexport const updateHttpCallStatus = (callId: number | string, newStatus: HttpCallStatus) => {\r\n  return {\r\n    type: UPDATE_HTTP_CALL_STATUS, payload: {\r\n      callId: callId,\r\n      status: newStatus\r\n    }\r\n  };\r\n};\r\n\r\nexport const addNewHttpCall = (httpCall: HttpCall) => {\r\n  return {\r\n    type: ADD_NEW_HTTP_CALL, payload: httpCall\r\n  };\r\n};\r\n\r\nexport const sendHttpRequest = (httpCall: HttpCall,\r\n                                nextAction: (response: Response) => void,\r\n                                errorAction?: (response: Response) => void) => {\r\n  doHttpCall(httpCall)\r\n    .then((response: Response) => {\r\n      if (!response.ok && errorAction) {\r\n        throw(response);\r\n      }\r\n      return response;\r\n    })\r\n    .then(onSuccessful(nextAction))\r\n    .catch(onFailed(errorAction));\r\n};\r\n\r\nconst doHttpCall = (httpCall: HttpCall): Promise<Response> => {\r\n  let configuration = {\r\n    method: httpCall.method,\r\n    credentials: httpCall.credentials ? httpCall.credentials : undefined\r\n  };\r\n  if (httpCall.headers) {\r\n    configuration = Object.assign({}, configuration, {\r\n      headers: httpCall.headers\r\n    });\r\n  }\r\n  if ((httpCall.method === HttpCallMethod.POST || httpCall.method === HttpCallMethod.PUT) && httpCall.requestBody) {\r\n    configuration = Object.assign({}, configuration, {\r\n      body: httpCall.requestBody\r\n    });\r\n  }\r\n  return fetch(httpCall.url, configuration);\r\n};\r\n\r\nconst onSuccessful = (processResponse: (response: Response) => void) => {\r\n  return (response: Response) => {\r\n    processResponse(response);\r\n  };\r\n};\r\n\r\nconst onFailed = (failedAction?: (errorResponse: Response) => void) => {\r\n  return (response: Response) => {\r\n    if (failedAction) {\r\n      failedAction(response);\r\n    } else {\r\n      throw(response);\r\n    }\r\n  };\r\n};\r\n","import * as uuid from \"uuid\";\r\nimport { REACT_APP_APPLICATION_BASE_URL } from \"./config\";\r\nimport { AnyAction } from \"redux\";\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\nimport { Contact, ErrorModalProps, HttpCall, HttpCallMethod, HttpCallStatus } from \"./state\";\r\nimport { addNewHttpCall, sendHttpRequest, updateHttpCallStatus } from \"./actionsHttp\";\r\n\r\nexport const UPDATE_ERROR_MODAL = \"UPDATE_ERROR_MODAL\";\r\nexport const UPDATE_CONTACT_LIST = \"UPDATE_CONTACT_LIST\";\r\nexport const ADD_NEW_CONTACT = \"ADD_NEW_CONTACT\";\r\nexport const UPDATE_CURRENT_CONTACT = \"UPDATE_CURRENT_CONTACT\";\r\n\r\nexport const UPDATE_FETCHING_CONTACT_STATUS = \"UPDATE_FETCHING_CONTACT_STATUS\";\r\nexport const UPDATE_STORING_CONTACT_STATUS = \"UPDATE_STORING_CONTACT_STATUS\";\r\nexport const UPDATE_FETCHING_CONTACT_DETAIL_STATUS = \"UPDATE_FETCHING_CONTACT_DETAIL_STATUS\";\r\n\r\nexport const updateErrorModalStatus = (errorModal: ErrorModalProps) => {\r\n  return { type: UPDATE_ERROR_MODAL, payload: errorModal };\r\n};\r\n\r\nexport const updateContacts = (contacts: Contact[]) => {\r\n  return { type: UPDATE_CONTACT_LIST, payload: contacts };\r\n};\r\n\r\nexport const addNewContact = (contact: Contact) => {\r\n  return { type: ADD_NEW_CONTACT, payload: contact };\r\n};\r\n\r\nexport const updateCurrentContact = (contactDetail: Contact) => {\r\n  return { type: UPDATE_CURRENT_CONTACT, payload: contactDetail };\r\n};\r\n\r\nexport const updateFetchingContactStatus = (isFetchingContact: boolean) => {\r\n  return {\r\n    type: UPDATE_FETCHING_CONTACT_STATUS, payload: isFetchingContact\r\n  };\r\n};\r\n\r\nexport const updateStoringContactStatus = (isStoringContact: boolean) => {\r\n  return {\r\n    type: UPDATE_STORING_CONTACT_STATUS, payload: isStoringContact\r\n  };\r\n};\r\n\r\nexport const updateFetchingContactDetailStatus = (isFetchingContactDetail: boolean) => {\r\n  return {\r\n    type: UPDATE_FETCHING_CONTACT_DETAIL_STATUS, payload: isFetchingContactDetail\r\n  };\r\n};\r\n\r\nexport const fetchContactList = () => {\r\n  return (dispatch: ThunkDispatch<{}, {}, AnyAction>) => {\r\n    const url = REACT_APP_APPLICATION_BASE_URL + \"contact\";\r\n    const newCallId = uuid.v4();\r\n    const httpCall: HttpCall = {\r\n      id: newCallId,\r\n      method: HttpCallMethod.GET,\r\n      url: url,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    };\r\n\r\n    let errorModalStatus: ErrorModalProps = {\r\n      isOpen: true,\r\n      title: \"Unable to retrieve Contact List.\"\r\n    };\r\n\r\n    const successfulAction = (response: Response) => {\r\n      if (response.body) {\r\n        response.json()\r\n          .then((data) => {\r\n            console.log('data: ', data);\r\n            dispatch(updateHttpCallStatus(newCallId, HttpCallStatus.SUCCESSFUL));\r\n            dispatch(updateContacts(data.data));\r\n            dispatch(updateFetchingContactStatus(false));\r\n          });\r\n      }\r\n    };\r\n\r\n    const failedAction = (response: Response) => {\r\n      console.log('fail');\r\n      dispatch(updateHttpCallStatus(newCallId, HttpCallStatus.ERROR));\r\n      if (response.body) {\r\n        response.json()\r\n          .then((data) => {\r\n            errorModalStatus.content = data.message;\r\n            dispatch(updateFetchingContactStatus(false));\r\n            dispatch(updateErrorModalStatus(errorModalStatus));\r\n            return;\r\n          })\r\n          .catch((error: Error) => {\r\n            errorModalStatus.content = error.message;\r\n            dispatch(updateFetchingContactStatus(false));\r\n            dispatch(updateErrorModalStatus(errorModalStatus));\r\n            return;\r\n          });\r\n      } else {\r\n        errorModalStatus.content = \"Unable to retrieve Contact List. Please contact developer.\";\r\n      }\r\n      dispatch(updateFetchingContactStatus(false));\r\n      if (errorModalStatus.content) {\r\n        dispatch(updateErrorModalStatus(errorModalStatus));\r\n      }\r\n    };\r\n    dispatch(updateFetchingContactStatus(true));\r\n    sendHttpRequest(httpCall, successfulAction, failedAction);\r\n    const httpCallSent = Object.assign({}, httpCall, {\r\n      status: HttpCallStatus.SENT\r\n    });\r\n    dispatch(addNewHttpCall(httpCallSent));\r\n  };\r\n};\r\n\r\nexport const storingContact = (firstName: string, lastName: string, age: number, photoUrl: string) => {\r\n  return (dispatch: ThunkDispatch<{}, {}, AnyAction>) => {\r\n    const url = REACT_APP_APPLICATION_BASE_URL + \"contact\";\r\n    const newCallId = uuid.v4();\r\n\r\n    const httpCall: HttpCall = {\r\n      id: newCallId,\r\n      method: HttpCallMethod.POST,\r\n      url: url,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      requestBody: JSON.stringify({\r\n        \"firstName\": firstName,\r\n        \"lastName\": lastName,\r\n        \"age\": age,\r\n        \"photo\": photoUrl\r\n      })\r\n    };\r\n\r\n    let errorModalStatus: ErrorModalProps = {\r\n      isOpen: true,\r\n      title: \"Unable to store Contact.\"\r\n    };\r\n\r\n    const successfulAction = (response: Response) => {\r\n      if (response.body) {\r\n        response.json()\r\n          .then(() => {\r\n            dispatch(updateHttpCallStatus(newCallId, HttpCallStatus.SUCCESSFUL));\r\n            dispatch(addNewContact({\r\n              firstName: firstName,\r\n              lastName: lastName,\r\n              age: age,\r\n              photo: photoUrl\r\n            }));\r\n            dispatch(updateStoringContactStatus(false));\r\n          });\r\n      }\r\n    };\r\n\r\n    const failedAction = (response: Response) => {\r\n      dispatch(updateHttpCallStatus(newCallId, HttpCallStatus.ERROR));\r\n      if (response.body) {\r\n        response.json()\r\n          .then((data) => {\r\n            errorModalStatus.content = data.message;\r\n            dispatch(updateStoringContactStatus(false));\r\n            dispatch(updateErrorModalStatus(errorModalStatus));\r\n            return;\r\n          })\r\n          .catch((error: Error) => {\r\n            errorModalStatus.content = error.message;\r\n            dispatch(updateStoringContactStatus(false));\r\n            dispatch(updateErrorModalStatus(errorModalStatus));\r\n            return;\r\n          });\r\n      } else {\r\n        errorModalStatus.content = \"Unable to add Contact List. Please contact developer.\";\r\n      }\r\n      dispatch(updateStoringContactStatus(false));\r\n      if (errorModalStatus.content) {\r\n        dispatch(updateErrorModalStatus(errorModalStatus));\r\n      }\r\n    };\r\n    dispatch(updateStoringContactStatus(true));\r\n    sendHttpRequest(httpCall, successfulAction, failedAction);\r\n    const httpCallSent = Object.assign({}, httpCall, {\r\n      status: HttpCallStatus.SENT\r\n    });\r\n    dispatch(addNewHttpCall(httpCallSent));\r\n  };\r\n};\r\n\r\nexport const fetchContactDetail = (contactId: string) => {\r\n  return (dispatch: ThunkDispatch<{}, {}, AnyAction>) => {\r\n    const url = REACT_APP_APPLICATION_BASE_URL + \"contact/\" + contactId;\r\n    const newCallId = uuid.v4();\r\n\r\n    const httpCall: HttpCall = {\r\n      id: newCallId,\r\n      method: HttpCallMethod.GET,\r\n      url: url,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    };\r\n\r\n    let errorModalStatus: ErrorModalProps = {\r\n      isOpen: true,\r\n      title: \"Unable to retrieve Contact Detail.\"\r\n    };\r\n\r\n    const successfulAction = (response: Response) => {\r\n      if (response.body) {\r\n        response.json()\r\n          .then((data) => {\r\n            console.log('data: ', data);\r\n            dispatch(updateHttpCallStatus(newCallId, HttpCallStatus.SUCCESSFUL));\r\n            dispatch(updateCurrentContact(data.data));\r\n            dispatch(updateFetchingContactDetailStatus(false));\r\n          });\r\n      }\r\n    };\r\n\r\n    const failedAction = (response: Response) => {\r\n      dispatch(updateHttpCallStatus(newCallId, HttpCallStatus.ERROR));\r\n      if (response.body) {\r\n        response.json()\r\n          .then((data) => {\r\n            errorModalStatus.content = data.message;\r\n            dispatch(updateFetchingContactDetailStatus(false));\r\n            dispatch(updateErrorModalStatus(errorModalStatus));\r\n            return;\r\n          })\r\n          .catch((error: Error) => {\r\n            errorModalStatus.content = error.message;\r\n            dispatch(updateFetchingContactDetailStatus(false));\r\n            dispatch(updateErrorModalStatus(errorModalStatus));\r\n            return;\r\n          });\r\n      } else {\r\n        errorModalStatus.content = \"Unable to retrieve Contact Detail. Please contact developer.\";\r\n      }\r\n      dispatch(updateFetchingContactDetailStatus(false));\r\n      if (errorModalStatus.content) {\r\n        dispatch(updateErrorModalStatus(errorModalStatus));\r\n      }\r\n    };\r\n    dispatch(updateFetchingContactDetailStatus(true));\r\n    sendHttpRequest(httpCall, successfulAction, failedAction);\r\n    const httpCallSent = Object.assign({}, httpCall, {\r\n      status: HttpCallStatus.SENT\r\n    });\r\n    dispatch(addNewHttpCall(httpCallSent));\r\n  };\r\n};\r\n","import React, { FormEvent } from \"react\";\r\nimport { Button, Form, Modal } from \"semantic-ui-react\";\r\nimport styles from \"./AddContactModal.module.css\";\r\n\r\ninterface AddContactModalProps {\r\n  isAddContactModalOpen: boolean;\r\n  firstName: string;\r\n  lastName: string;\r\n  age: number;\r\n  photoUrl: string;\r\n  errorMessage: string;\r\n  isStoringContact: boolean;\r\n  handleFirstNameChange: (event: FormEvent<HTMLInputElement>) => void;\r\n  handleLastNameChange: (event: FormEvent<HTMLInputElement>) => void;\r\n  handleAgeChange: (event: React.FormEvent<HTMLInputElement>) => void;\r\n  handlePhotoUrlChange: (event: FormEvent<HTMLInputElement>) => void;\r\n  handleCancelButtonClick: () => void;\r\n  handleAddContactButtonClick: () => void;\r\n}\r\n\r\nconst AddContactModal: React.FC<AddContactModalProps> = (props: AddContactModalProps) => {\r\n  return (\r\n    <Modal open={props.isAddContactModalOpen} size=\"tiny\">\r\n      <Modal.Header>\r\n        Add New Contact\r\n      </Modal.Header>\r\n      <Modal.Content>\r\n        <Form>\r\n          <Form.Input fluid\r\n                      label='First Name'\r\n                      placeholder='First Name'\r\n                      value={props.firstName}\r\n                      onChange={props.handleFirstNameChange}\r\n          />\r\n          <Form.Input fluid\r\n                      label='Last Name'\r\n                      placeholder='Last Name'\r\n                      value={props.lastName}\r\n                      onChange={props.handleLastNameChange}\r\n          />\r\n          <Form.Input fluid\r\n                      label='Age'\r\n                      placeholder='Age'\r\n                      type='number'\r\n                      min='0'\r\n                      value={props.age}\r\n                      onChange={props.handleAgeChange}\r\n          />\r\n          <Form.Input fluid\r\n                      label='Photo (URL)'\r\n                      placeholder='Last Name'\r\n                      value={props.photoUrl}\r\n                      onChange={props.handlePhotoUrlChange}\r\n          />\r\n          <span className={styles.ErrorMessage}>{props.errorMessage}</span>\r\n        </Form>\r\n\r\n      </Modal.Content>\r\n      <Modal.Actions>\r\n        <Button color=\"red\" onClick={props.handleCancelButtonClick} className={styles.CancelButton}>\r\n          Cancel\r\n        </Button>\r\n        <Button color=\"violet\" onClick={props.handleAddContactButtonClick} className={styles.AddButton}\r\n                loading={props.isStoringContact}>\r\n          Add\r\n        </Button>\r\n      </Modal.Actions>\r\n    </Modal>\r\n  )\r\n};\r\n\r\nexport default AddContactModal;\r\n","import React, { FormEvent, useEffect, useState, useCallback } from \"react\";\r\nimport { useHistory } from 'react-router';\r\nimport HomePage from \"../Components/HomePage\";\r\nimport { fetchContactList, storingContact } from \"../actionsContact\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport { Contact, State } from \"../state\";\r\nimport AddContactModal from \"../modals/AddContactModal\";\r\n\r\nconst mapStateToProps = (state: State) => {\r\n  return {\r\n    contacts: state.data.contacts,\r\n    isFetchingContact: state.session.isFetchingContact,\r\n    isStoringContact: state.session.isStoringContact\r\n  };\r\n};\r\n\r\ninterface HomePageContainerProps {\r\n  contacts: Contact[];\r\n  isFetchingContact: boolean;\r\n  isStoringContact: boolean;\r\n}\r\n\r\nconst HomePageContainer: React.FC<HomePageContainerProps> = (props: HomePageContainerProps) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const contacts = props.contacts;\r\n  const isFetchingContact = props.isFetchingContact;\r\n  const isStoringContact = props.isStoringContact;\r\n\r\n  const [isAddContactModalOpen, setIsAddContactModalOpen] = useState(false);\r\n  const [firstName, setFirstName] = useState('');\r\n  const [lastName, setLastName] = useState('');\r\n  const [age, setAge] = useState(1);\r\n  const [photoUrl, setPhotoUrl] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchContactList());\r\n\r\n  }, [dispatch]);\r\n\r\n  const handleFirstNameChange = (event: FormEvent<HTMLInputElement>) => {\r\n    setFirstName(event.currentTarget.value);\r\n  };\r\n\r\n  const handleLastNameChange = (event: FormEvent<HTMLInputElement>) => {\r\n    setLastName(event.currentTarget.value);\r\n  };\r\n\r\n  const handleAgeChange = (event: FormEvent<HTMLInputElement>) => {\r\n    setAge(Number(event.currentTarget.value));\r\n  };\r\n\r\n  const handlePhotoUrlChange = (event: FormEvent<HTMLInputElement>) => {\r\n    setPhotoUrl(event.currentTarget.value);\r\n  };\r\n\r\n  const history = useHistory();\r\n\r\n  const handleContactClick = (contactId: string | undefined) => {\r\n    if (contactId) {\r\n      history.push(\"/\".concat(contactId));\r\n    }\r\n  };\r\n\r\n  const handleAddButtonClick = () => {\r\n    setIsAddContactModalOpen(true);\r\n  };\r\n\r\n  const handleCancelButtonClick = () => {\r\n    setIsAddContactModalOpen(false)\r\n  };\r\n\r\n  const handleAddContactButtonClick = useCallback(\r\n    () => {\r\n      if (firstName.length < 3) {\r\n        setErrorMessage('First Name length must be at least 3 characters long.');\r\n      } else if (lastName.length < 3) {\r\n        setErrorMessage('Last Name length must be at least 3 characters long.');\r\n      } else if (age < 1) {\r\n        setErrorMessage('Age must be larger than or equal to 1.');\r\n      } else if (photoUrl.length === 0) {\r\n        setErrorMessage('Photo (URL) is not allowed to be empty.');\r\n      } else {\r\n        dispatch(storingContact(firstName, lastName, age, photoUrl));\r\n        setIsAddContactModalOpen(false);\r\n      }\r\n    },\r\n    [dispatch, firstName, lastName, age, photoUrl]\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <HomePage contacts={contacts}\r\n                isFetchingContact={isFetchingContact}\r\n                handleContactClick={handleContactClick}\r\n                handleAddButtonClick={handleAddButtonClick}\r\n      />\r\n      <AddContactModal isAddContactModalOpen={isAddContactModalOpen}\r\n                       firstName={firstName}\r\n                       lastName={lastName}\r\n                       age={age}\r\n                       photoUrl={photoUrl}\r\n                       errorMessage={errorMessage}\r\n                       isStoringContact={isStoringContact}\r\n                       handleFirstNameChange={handleFirstNameChange}\r\n                       handleLastNameChange={handleLastNameChange}\r\n                       handleAgeChange={handleAgeChange}\r\n                       handlePhotoUrlChange={handlePhotoUrlChange}\r\n                       handleCancelButtonClick={handleCancelButtonClick}\r\n                       handleAddContactButtonClick={handleAddContactButtonClick}/>\r\n    </React.Fragment>\r\n  )\r\n};\r\n\r\nexport default connect(mapStateToProps)(HomePageContainer);\r\n","import React from \"react\";\r\nimport { Button, Header, Modal } from \"semantic-ui-react\";\r\nimport { State } from \"../state\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { updateErrorModalStatus } from \"../actions\";\r\nimport styles from  \"./ErrorModalContainer.module.css\";\r\n\r\ninterface ErrorModalProps {\r\n  dispatch: Dispatch;\r\n  isOpen: boolean;\r\n  title?: string;\r\n  content?: string | JSX.Element;\r\n}\r\n\r\nconst mapStateToProps = (state: State) => {\r\n  return {\r\n    isOpen: state.control.errorModal.isOpen,\r\n    title: state.control.errorModal.title,\r\n    content: state.control.errorModal.content\r\n  };\r\n};\r\n\r\nconst ErrorModalContainer: React.FC<ErrorModalProps> = (props: ErrorModalProps) => {\r\n  const handleCloseErrorModal = () => {\r\n    props.dispatch(updateErrorModalStatus({\r\n      title: \"\",\r\n      content: \"\",\r\n      isOpen: false\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      open={props.isOpen}\r\n      onClose={handleCloseErrorModal}\r\n      size='small'\r\n      className={styles.ErrorModal}\r\n    >\r\n      <Header icon='close' content={props.title ? props.title : \"Error\"} className={styles.Header}/>\r\n      <Modal.Content>\r\n        {props.content ? props.content : \"There is an error in the current operation. Please refresh your browser and try again.\"}\r\n      </Modal.Content>\r\n      <Modal.Actions>\r\n        <Button negative onClick={handleCloseErrorModal}>\r\n          Close\r\n        </Button>\r\n      </Modal.Actions>\r\n    </Modal>\r\n  );\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps)(ErrorModalContainer);\r\n","import { ErrorModalProps } from \"./state\";\r\n\r\nexport const UPDATE_ERROR_MODAL = \"UPDATE_ERROR_MODAL\";\r\n\r\nexport const updateErrorModalStatus = (errorModal: ErrorModalProps) => {\r\n  return { type: UPDATE_ERROR_MODAL, payload: errorModal };\r\n};\r\n","import React from 'react';\r\nimport { Contact } from \"../state\";\r\nimport { Button, Image } from \"semantic-ui-react\";\r\nimport styles from './ContactDetailPage.module.css';\r\nimport LoadingComponent from \"../common/LoadingComponent\";\r\n\r\ninterface ContactDetailPageProps {\r\n  currentContact: Contact;\r\n  isFetchingContactDetail: boolean\r\n  handleButtonBackClick: () => void;\r\n  handleButtonDeleteClick: () => void;\r\n}\r\n\r\nconst ContactDetailPage: React.FC<ContactDetailPageProps> = (props: ContactDetailPageProps) => {\r\n  return(\r\n    <div className={styles.ContactContainer}>\r\n      {\r\n        props.isFetchingContactDetail ?\r\n          <LoadingComponent/>\r\n          :\r\n          <div className={styles.ContactDetail}>\r\n            <Image src={props.currentContact.photo} className={styles.Logo}/>\r\n            <span className={styles.Name}>{props.currentContact.firstName.concat(' ').concat(props.currentContact.lastName)}</span>\r\n            <span className={styles.Age}>{props.currentContact.age} years old</span>\r\n            <div className={styles.Buttons}>\r\n              <Button size='big' className={styles.Button} color=\"blue\" circular icon='chevron left' onClick={props.handleButtonBackClick}/>\r\n              <Button size='big' className={styles.Button} color=\"orange\" circular icon='edit'/>\r\n              <Button size='big' className={styles.Button} color=\"red\" circular icon='trash' onClick={props.handleButtonDeleteClick}/>\r\n            </div>\r\n          </div>\r\n      }\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default ContactDetailPage;\r\n","import React, { useEffect } from 'react';\r\nimport ContactDetailPage from \"../Components/ContactDetailPage\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport { fetchContactDetail } from \"../actionsContact\";\r\nimport { RouteComponentProps, useHistory } from \"react-router\";\r\nimport { Contact, State } from \"../state\";\r\n\r\nconst mapStateToProps = (state: State) => {\r\n  return {\r\n    currentContact: state.control.currentContact,\r\n    isFetchingContactDetail: state.session.isFetchingContactDetail,\r\n  }\r\n};\r\n\r\nexport interface ContactDetailPageContainerProps extends RouteComponentProps<any> {\r\n  currentContact: Contact;\r\n  isFetchingContactDetail: boolean;\r\n}\r\n\r\nconst ContactDetailPageContainer: React.FC<ContactDetailPageContainerProps> = (props: ContactDetailPageContainerProps) => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const urlParams = props.match.params;\r\n  const contactIdParam = urlParams.contactId;\r\n\r\n  const currentContact = props.currentContact;\r\n  const isFetchingContactDetail = props.isFetchingContactDetail;\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchContactDetail(contactIdParam));\r\n  }, [dispatch, contactIdParam]);\r\n\r\n  const handleButtonBackClick = () => {\r\n    history.push('/')\r\n  };\r\n\r\n  const handleButtonDeleteClick = () => {\r\n    // dispatch(deleteContact(contactIdParam))\r\n  };\r\n\r\n  return (\r\n    <ContactDetailPage currentContact={currentContact}\r\n                       isFetchingContactDetail={isFetchingContactDetail}\r\n                       handleButtonBackClick={handleButtonBackClick}\r\n                       handleButtonDeleteClick={handleButtonDeleteClick}\r\n    />\r\n  )\r\n};\r\n\r\nexport default connect(mapStateToProps)(ContactDetailPageContainer);\r\n","import React from 'react';\r\nimport './App.css';\r\nimport HomePageContainer from \"../Containers/HomePageContainer\";\r\nimport ErrorModalContainer from \"../Containers/ErrorModalContainer\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport ContactDetailPageContainer from \"../Containers/ContactDetailPageContainer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={HomePageContainer}/>\r\n        <Route exact path=\"/:contactId\" component={ContactDetailPageContainer}/>\r\n      </Switch>\r\n      <ErrorModalContainer/>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { DataState, CommunicationState, ControlState, SessionState } from \"./state\";\r\n\r\nexport const initialDataState: DataState = {\r\n  contacts: []\r\n};\r\n\r\nexport const initialCommunicationState: CommunicationState = {\r\n  httpCalls: []\r\n};\r\n\r\nexport const initialControlState: ControlState = {\r\n  currentContact: {\r\n    id: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    age: 0,\r\n    photo: \"\"\r\n  },\r\n  errorModal: {\r\n    isOpen: false\r\n  },\r\n  successfulModal: {\r\n    isOpen: false,\r\n    title: \"\",\r\n    content: \"\"\r\n  }\r\n};\r\n\r\nexport const initialSessionState: SessionState = {\r\n  isFetchingContact: false,\r\n  isStoringContact: false,\r\n  isUpdatingContact: false,\r\n  isDeletingContact: false,\r\n  isFetchingContactDetail: false\r\n};\r\n","import { CommunicationState, ControlState, DataState, SessionState, State } from \"./state\";\r\nimport { combineReducers } from \"redux\";\r\nimport { initialCommunicationState, initialControlState, initialDataState, initialSessionState } from \"./initialStates\";\r\nimport * as actionsContact from \"./actionsContact\";\r\nimport * as actionsHttp from \"./actionsHttp\";\r\nimport * as actions from \"./actions\";\r\n\r\nexport const dataReducer = (state: DataState = initialDataState, action: any) => {\r\n  switch (action.type) {\r\n    case actionsContact.UPDATE_CONTACT_LIST:\r\n      return Object.assign({}, state, {\r\n        contacts: action.payload\r\n      });\r\n    case actionsContact.ADD_NEW_CONTACT:\r\n      return Object.assign({}, state, {\r\n        contacts: [\r\n          ...state.contacts,\r\n          action.payload\r\n        ]\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const controlReducer = (state: ControlState = initialControlState, action: any) => {\r\n  switch (action.type) {\r\n    case actions.UPDATE_ERROR_MODAL:\r\n      return Object.assign({}, state, {\r\n        errorModal: action.payload\r\n      });\r\n    case actionsContact.UPDATE_CURRENT_CONTACT:\r\n      return Object.assign({}, state, {\r\n        currentContact: action.payload\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const sessionReducer = (state: SessionState = initialSessionState, action: any) => {\r\n  switch (action.type) {\r\n    case actionsContact.UPDATE_FETCHING_CONTACT_STATUS:\r\n      return Object.assign({}, state, {\r\n        isFetchingContact: action.payload\r\n      });\r\n    case actionsContact.UPDATE_STORING_CONTACT_STATUS:\r\n      return Object.assign({}, state, {\r\n        isStoringContact: action.payload\r\n      });\r\n    case actionsContact.UPDATE_FETCHING_CONTACT_DETAIL_STATUS:\r\n      return Object.assign({}, state, {\r\n        isFetchingContactDetail: action.payload\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const communicationReducer = (state: CommunicationState = initialCommunicationState, action: any) => {\r\n  switch (action.type) {\r\n    case actionsHttp.ADD_NEW_HTTP_CALL: {\r\n      return Object.assign({}, state, {\r\n        httpCalls: [\r\n          ...state.httpCalls,\r\n          action.payload\r\n        ]\r\n      });\r\n    }\r\n    case actionsHttp.UPDATE_HTTP_CALL_STATUS: {\r\n      const httpCallIndex = state.httpCalls.findIndex((x) => x.id === action.payload.callId);\r\n      const newHttpCall = Object.assign({}, state.httpCalls[httpCallIndex], {\r\n        status: action.payload.status\r\n      });\r\n      if (httpCallIndex >= 0) {\r\n        return Object.assign({}, state, {\r\n          httpCalls: [\r\n            ...state.httpCalls.slice(0, httpCallIndex),\r\n            newHttpCall,\r\n            ...state.httpCalls.slice(httpCallIndex + 1)\r\n          ]\r\n        });\r\n      } else {\r\n        return state;\r\n      }\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport const reducers = combineReducers<State>({\r\n  data: dataReducer,\r\n  control: controlReducer,\r\n  session: sessionReducer,\r\n  communication: communicationReducer\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from \"react-redux\";\r\nimport { applyMiddleware, createStore } from \"redux\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport { reducers } from \"./reducers\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nconst logger = createLogger({\r\n  level: \"info\",\r\n  collapsed: true,\r\n  diff: true\r\n});\r\n\r\nconst composeEnhancers = composeWithDevTools({\r\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\r\n});\r\n\r\nconst middleware = composeEnhancers(applyMiddleware(\r\n  thunkMiddleware,\r\n  logger\r\n));\r\n\r\nconst store = createStore(reducers, middleware);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BrowserRouter basename=\"/code-id-test\">\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactContainer\":\"HomePage_ContactContainer__3lw62\",\"Float\":\"HomePage_Float__27EHr\",\"Logo\":\"HomePage_Logo__1kSQc\",\"ContactList\":\"HomePage_ContactList__2NkDc\"};"],"sourceRoot":""}